Please do not delete this references.


@controller
/* @GetMapping("/carsDetails") //Dashboard

    public List<CarInformation> finData(@RequestParam int vendorId){
        List <CarInformation> carInformation = this.carService.fetchRecords(vendorId);

        return carInformation;
    }*/

*****************************************************************************************
@repository

public interface CarRepository extends CrudRepository<CarTable,Integer> {
    List<CarTable> findByVendorId(Integer vendorId);


 *********************************************************************************************
        @services
         public List <CarInformation> fetchRecords(Integer vendorId) { // method to fetch records
                List<CarTable> carTable = this.carRepository.findByVendorId(vendorId);// fetching data and storing in 'carTable' by passing vendorId parameter
                List <CarInformation> carInformation = new ArrayList<>();// Array list to store data
                if(carTable != null){// checking if carTable is not null go for next step
                    for( CarTable cars: carTable) {// for each loop to iterate. 'carTable' data pass to cars.
                        CarInformation carInformation1 = new CarInformation();// creating new object to store data.
                        carInformation1.setCarModel(cars.getCarModel());// iterating and setting data from cars(carTable) to carInformation1 (temporary)
                        carInformation1.setCarACorNonAc(cars.getCarACorNonAc()); //iterating and setting data from cars(carTable) to carInformation1 (temporary)
                        carInformation1.setCarSeater(cars.getCarSeater());
                        carInformation1.setCarType(cars.getCarType());
                        carInformation1.setCarRegistration(cars.getCarRegistration());
                        carInformation1.setStatus(cars.getStatus());
                        carInformation1.setBaggageCapacity(cars.getBaggageCapacity());
                        carInformation1.setBasePrice(cars.getBasePrice());
                        carInformation1.setImageUrl(cars.getImageUrl());
                        carInformation1.setInsurance(cars.getInsurance());
                        carInformation1.setYearsOld(cars.getYearsOld());
                        carInformation.add(carInformation1);
                    }

                }
                return carInformation;

           }


************************************************************************************************
****************************************************************************************

@ Controller

 @GetMapping("/carsDetails")

    public List<CarInformation> finData(@RequestParam String carType){
       List <CarInformation> carInformation = this.carService.fetchRecords(carType);

    return carInformation;
    }


**********************************************************************************

@ Repository
This is a FORMAT  ONLY
     /* @Query ("SELECT a FROM CarTable a where a.carType =:carType") //'a' is an alias of CarTable;
        List<CarTable> findByCarType(String CarType);*// method and parameter format


         @Query ("SELECT a FROM CarTable a where a.carType =:carType") //'a' is an alias of CarTable;
            List<CarTable> findByCarType(String carType);
*******************************************************************************************

@services
  public List <CarInformation> fetchRecords(String carType) { // method to fetch records
       List<CarTable> carTable = this.carRepository.findByCarType(carType);// fetching data and storing in 'carTable' by passing vendorId parameter
       List <CarInformation> carInformation = new ArrayList<>();// Array list to store data
        if(carTable != null){// checking if carTable is not null go for next step
            for( CarTable cars: carTable) {// for each loop to iterate. 'carTable' data pass to cars.
                CarInformation carInformation1 = new CarInformation();// creating new object to store data.
                carInformation1.setCarModel(cars.getCarModel());// iterating and setting data from cars(carTable) to carInformation1 (temporary)
                carInformation1.setCarACorNonAc(cars.getCarACorNonAc()); //iterating and setting data from cars(carTable) to carInformation1 (temporary)
                carInformation.add(carInformation1);
            }

        }
        return carInformation;
    }


    ****************************************************************************************************
    ****************************************************************************************************
     To add single car at a time

     @controller
     /*  @PostMapping("/save") To save single car at a time
        public String saveCar(@RequestBody CarInformation carInformation){
            this.carService.saveCar(carInformation);


            return "success";
        }*/


        @service
         /*  public String  saveCar(CarInformation carInformation) { //working fine but saving individual object
               Integer vendorId = vendorRegRepository.findByEmail("abc@test.com");


                CarTable carTable = new CarTable();
                carTable.setCarType(carInformation.getCarType());
                carTable.setCarModel(carInformation.getCarModel());
                carTable.setCarSeater(carInformation.getCarSeater());
                carTable.setBaggageCapacity(carInformation.getBaggageCapacity());
                carTable.setCarRegistration(carInformation.getCarRegistration());
                carTable.setCarACorNonAc(carInformation.getCarACorNonAc());
                carTable.setBasePrice(carInformation.getBasePrice());
                carTable.setYearsOld(carInformation.getYearsOld());
                carTable.setInsurance(carInformation.getInsurance());
                carTable.setStatus(carInformation.getStatus());
                carTable.setImageUrl(carInformation.getImageUrl());
                carTable.setVendorId(vendorId);


                try {
                    carRepository.save(carTable);
                }catch (Exception e) {
                    System.err.println("Error details " + e.getMessage());

                }
                return "successful";
            }
            */

*************************************************************************************************************